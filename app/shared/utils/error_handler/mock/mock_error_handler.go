// Code generated by MockGen. DO NOT EDIT.
// Source: app/shared/utils/error_handler/error_handler.go

// Package mock_error_handler is a generated GoMock package.
package mock_error_handler

import (
	context "context"
	reflect "reflect"

	metrics "cnores-skeleton-golang-app/app/infrastructure/metrics"
	error_handler "cnores-skeleton-golang-app/app/shared/utils/error_handler"
	gomock "github.com/golang/mock/gomock"
)

// MockNotifiableError is a mock of NotifiableError interface.
type MockNotifiableError struct {
	ctrl     *gomock.Controller
	recorder *MockNotifiableErrorMockRecorder
}

// MockNotifiableErrorMockRecorder is the mock recorder for MockNotifiableError.
type MockNotifiableErrorMockRecorder struct {
	mock *MockNotifiableError
}

// NewMockNotifiableError creates a new mock instance.
func NewMockNotifiableError(ctrl *gomock.Controller) *MockNotifiableError {
	mock := &MockNotifiableError{ctrl: ctrl}
	mock.recorder = &MockNotifiableErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifiableError) EXPECT() *MockNotifiableErrorMockRecorder {
	return m.recorder
}

// CanNotify mocks base method.
func (m *MockNotifiableError) CanNotify() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanNotify")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanNotify indicates an expected call of CanNotify.
func (mr *MockNotifiableErrorMockRecorder) CanNotify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanNotify", reflect.TypeOf((*MockNotifiableError)(nil).CanNotify))
}

// Error mocks base method.
func (m *MockNotifiableError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockNotifiableErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockNotifiableError)(nil).Error))
}

// GetChannel mocks base method.
func (m *MockNotifiableError) GetChannel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockNotifiableErrorMockRecorder) GetChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockNotifiableError)(nil).GetChannel))
}

// GetErrorType mocks base method.
func (m *MockNotifiableError) GetErrorType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetErrorType indicates an expected call of GetErrorType.
func (mr *MockNotifiableErrorMockRecorder) GetErrorType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorType", reflect.TypeOf((*MockNotifiableError)(nil).GetErrorType))
}

// GetShippingGroupId mocks base method.
func (m *MockNotifiableError) GetShippingGroupId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShippingGroupId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetShippingGroupId indicates an expected call of GetShippingGroupId.
func (mr *MockNotifiableErrorMockRecorder) GetShippingGroupId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShippingGroupId", reflect.TypeOf((*MockNotifiableError)(nil).GetShippingGroupId))
}

// MockErrorHandlerInterface is a mock of ErrorHandlerInterface interface.
type MockErrorHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockErrorHandlerInterfaceMockRecorder
}

// MockErrorHandlerInterfaceMockRecorder is the mock recorder for MockErrorHandlerInterface.
type MockErrorHandlerInterfaceMockRecorder struct {
	mock *MockErrorHandlerInterface
}

// NewMockErrorHandlerInterface creates a new mock instance.
func NewMockErrorHandlerInterface(ctrl *gomock.Controller) *MockErrorHandlerInterface {
	mock := &MockErrorHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockErrorHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorHandlerInterface) EXPECT() *MockErrorHandlerInterfaceMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockErrorHandlerInterface) Handle(ctx context.Context, e error, metricClient metrics.MetricInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", ctx, e, metricClient)
}

// Handle indicates an expected call of Handle.
func (mr *MockErrorHandlerInterfaceMockRecorder) Handle(ctx, e, metricClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockErrorHandlerInterface)(nil).Handle), ctx, e, metricClient)
}

// HandleAndNotify mocks base method.
func (m *MockErrorHandlerInterface) HandleAndNotify(ctx context.Context, e error_handler.NotifiableError, metricClient metrics.MetricInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleAndNotify", ctx, e, metricClient)
}

// HandleAndNotify indicates an expected call of HandleAndNotify.
func (mr *MockErrorHandlerInterfaceMockRecorder) HandleAndNotify(ctx, e, metricClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAndNotify", reflect.TypeOf((*MockErrorHandlerInterface)(nil).HandleAndNotify), ctx, e, metricClient)
}
