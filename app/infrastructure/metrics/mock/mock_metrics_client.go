// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/cristiannores/Documents/medical-connect-app/medical-connect-user/app/infrastructure/metrics/metrics_client.go

// Package mock_metrics is a generated GoMock package.
package mock_metrics

import (
	context "context"
	metrics "cnores-skeleton-golang-app/app/infrastructure/metrics"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
)

// MockMetricInterface is a mock of MetricInterface interface.
type MockMetricInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMetricInterfaceMockRecorder
}

// MockMetricInterfaceMockRecorder is the mock recorder for MockMetricInterface.
type MockMetricInterfaceMockRecorder struct {
	mock *MockMetricInterface
}

// NewMockMetricInterface creates a new mock instance.
func NewMockMetricInterface(ctrl *gomock.Controller) *MockMetricInterface {
	mock := &MockMetricInterface{ctrl: ctrl}
	mock.recorder = &MockMetricInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricInterface) EXPECT() *MockMetricInterfaceMockRecorder {
	return m.recorder
}

// GetMetricByName mocks base method.
func (m *MockMetricInterface) GetMetricByName(ctx context.Context, name metrics.MetricNames) *prometheus.CounterVec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricByName", ctx, name)
	ret0, _ := ret[0].(*prometheus.CounterVec)
	return ret0
}

// GetMetricByName indicates an expected call of GetMetricByName.
func (mr *MockMetricInterfaceMockRecorder) GetMetricByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricByName", reflect.TypeOf((*MockMetricInterface)(nil).GetMetricByName), ctx, name)
}

// IncrementErrorMetric mocks base method.
func (m *MockMetricInterface) IncrementErrorMetric(ctx context.Context, labelValue string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementErrorMetric", ctx, labelValue)
}

// IncrementErrorMetric indicates an expected call of IncrementErrorMetric.
func (mr *MockMetricInterfaceMockRecorder) IncrementErrorMetric(ctx, labelValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementErrorMetric", reflect.TypeOf((*MockMetricInterface)(nil).IncrementErrorMetric), ctx, labelValue)
}

// IncrementMetric mocks base method.
func (m *MockMetricInterface) IncrementMetric(ctx context.Context, labels map[string]string, metricName metrics.MetricNames) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementMetric", ctx, labels, metricName)
}

// IncrementMetric indicates an expected call of IncrementMetric.
func (mr *MockMetricInterfaceMockRecorder) IncrementMetric(ctx, labels, metricName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementMetric", reflect.TypeOf((*MockMetricInterface)(nil).IncrementMetric), ctx, labels, metricName)
}

// InitMetrics mocks base method.
func (m *MockMetricInterface) InitMetrics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitMetrics")
}

// InitMetrics indicates an expected call of InitMetrics.
func (mr *MockMetricInterfaceMockRecorder) InitMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMetrics", reflect.TypeOf((*MockMetricInterface)(nil).InitMetrics))
}

// ObserveTimeElapsedApiMetric mocks base method.
func (m *MockMetricInterface) ObserveTimeElapsedApiMetric(ctx context.Context, labels map[string]string, secondsToAdd float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveTimeElapsedApiMetric", ctx, labels, secondsToAdd)
}

// ObserveTimeElapsedApiMetric indicates an expected call of ObserveTimeElapsedApiMetric.
func (mr *MockMetricInterfaceMockRecorder) ObserveTimeElapsedApiMetric(ctx, labels, secondsToAdd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveTimeElapsedApiMetric", reflect.TypeOf((*MockMetricInterface)(nil).ObserveTimeElapsedApiMetric), ctx, labels, secondsToAdd)
}
