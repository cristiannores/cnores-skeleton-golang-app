// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/j0b0jq4/Documents/GitWalmart/endurance-ox-billing-agent-pro/app/infrastructure/services/http/http_client_interface.go

// Package mock_http_client is a generated GoMock package.
package mock_http_client

import (
	context "context"
	reflect "reflect"

	http_client "cnores-skeleton-golang-app/app/infrastructure/services/http"
	gomock "github.com/golang/mock/gomock"
)

// MockHttpClientInterface is a mock of HttpClientInterface interface.
type MockHttpClientInterface[Request any, Response any] struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientInterfaceMockRecorder[Request, Response]
}

// MockHttpClientInterfaceMockRecorder is the mock recorder for MockHttpClientInterface.
type MockHttpClientInterfaceMockRecorder[Request any, Response any] struct {
	mock *MockHttpClientInterface[Request, Response]
}

// NewMockHttpClientInterface creates a new mock instance.
func NewMockHttpClientInterface[Request any, Response any](ctrl *gomock.Controller) *MockHttpClientInterface[Request, Response] {
	mock := &MockHttpClientInterface[Request, Response]{ctrl: ctrl}
	mock.recorder = &MockHttpClientInterfaceMockRecorder[Request, Response]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpClientInterface[Request, Response]) EXPECT() *MockHttpClientInterfaceMockRecorder[Request, Response] {
	return m.recorder
}

// Get mocks base method.
func (m *MockHttpClientInterface[Request, Response]) Get(ctx context.Context, url string) (*http_client.HttpResponse[Response], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url)
	ret0, _ := ret[0].(*http_client.HttpResponse[Response])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHttpClientInterfaceMockRecorder[Request, Response]) Get(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHttpClientInterface[Request, Response])(nil).Get), ctx, url)
}

// Post mocks base method.
func (m *MockHttpClientInterface[Request, Response]) Post(ctx context.Context, url string, body Request) (*http_client.HttpResponse[Response], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, url, body)
	ret0, _ := ret[0].(*http_client.HttpResponse[Response])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHttpClientInterfaceMockRecorder[Request, Response]) Post(ctx, url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHttpClientInterface[Request, Response])(nil).Post), ctx, url, body)
}
