// Code generated by MockGen. DO NOT EDIT.
// Source: producer_client.go

// Package mock_producer is a generated GoMock package.
package mock_producer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// MockCloseable is a mock of Closeable interface.
type MockCloseable struct {
	ctrl     *gomock.Controller
	recorder *MockCloseableMockRecorder
}

// MockCloseableMockRecorder is the mock recorder for MockCloseable.
type MockCloseableMockRecorder struct {
	mock *MockCloseable
}

// NewMockCloseable creates a new mock instance.
func NewMockCloseable(ctrl *gomock.Controller) *MockCloseable {
	mock := &MockCloseable{ctrl: ctrl}
	mock.recorder = &MockCloseableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloseable) EXPECT() *MockCloseableMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCloseable) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCloseableMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloseable)(nil).Close))
}

// MockProducerInterface is a mock of ProducerInterface interface.
type MockProducerInterface[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockProducerInterfaceMockRecorder[T]
}

// MockProducerInterfaceMockRecorder is the mock recorder for MockProducerInterface.
type MockProducerInterfaceMockRecorder[T any] struct {
	mock *MockProducerInterface[T]
}

// NewMockProducerInterface creates a new mock instance.
func NewMockProducerInterface[T any](ctrl *gomock.Controller) *MockProducerInterface[T] {
	mock := &MockProducerInterface[T]{ctrl: ctrl}
	mock.recorder = &MockProducerInterfaceMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerInterface[T]) EXPECT() *MockProducerInterfaceMockRecorder[T] {
	return m.recorder
}

// Produce mocks base method.
func (m *MockProducerInterface[T]) Produce(ctx context.Context, key string, value *T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockProducerInterfaceMockRecorder[T]) Produce(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockProducerInterface[T])(nil).Produce), ctx, key, value)
}
