// Code generated by MockGen. DO NOT EDIT.
// Source: app/infrastructure/mongo_client/mongo_client.go

// Package mock_mongo_client is a generated GoMock package.
package mock_mongo_client

import (
	context "context"
	reflect "reflect"

	mongo_client "cnores-skeleton-golang-app/app/infrastructure/mongo_client"
	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockDatabaseInterface is a mock of DatabaseInterface interface.
type MockDatabaseInterface[R any] struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseInterfaceMockRecorder[R]
}

// MockDatabaseInterfaceMockRecorder is the mock recorder for MockDatabaseInterface.
type MockDatabaseInterfaceMockRecorder[R any] struct {
	mock *MockDatabaseInterface[R]
}

// NewMockDatabaseInterface creates a new mock instance.
func NewMockDatabaseInterface[R any](ctrl *gomock.Controller) *MockDatabaseInterface[R] {
	mock := &MockDatabaseInterface[R]{ctrl: ctrl}
	mock.recorder = &MockDatabaseInterfaceMockRecorder[R]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseInterface[R]) EXPECT() *MockDatabaseInterfaceMockRecorder[R] {
	return m.recorder
}

// Client mocks base method.
func (m *MockDatabaseInterface[R]) Client() mongo_client.MongoClientInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(mongo_client.MongoClientInterface)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockDatabaseInterfaceMockRecorder[R]) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockDatabaseInterface[R])(nil).Client))
}

// Collection mocks base method.
func (m *MockDatabaseInterface[R]) Collection(name string) mongo_client.CollectionInterface[R] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", name)
	ret0, _ := ret[0].(mongo_client.CollectionInterface[R])
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockDatabaseInterfaceMockRecorder[R]) Collection(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockDatabaseInterface[R])(nil).Collection), name)
}

// MockCollectionInterface is a mock of CollectionInterface interface.
type MockCollectionInterface[R any] struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionInterfaceMockRecorder[R]
}

// MockCollectionInterfaceMockRecorder is the mock recorder for MockCollectionInterface.
type MockCollectionInterfaceMockRecorder[R any] struct {
	mock *MockCollectionInterface[R]
}

// NewMockCollectionInterface creates a new mock instance.
func NewMockCollectionInterface[R any](ctrl *gomock.Controller) *MockCollectionInterface[R] {
	mock := &MockCollectionInterface[R]{ctrl: ctrl}
	mock.recorder = &MockCollectionInterfaceMockRecorder[R]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionInterface[R]) EXPECT() *MockCollectionInterfaceMockRecorder[R] {
	return m.recorder
}

// DeleteOne mocks base method.
func (m *MockCollectionInterface[R]) DeleteOne(ctx, filter interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockCollectionInterfaceMockRecorder[R]) DeleteOne(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockCollectionInterface[R])(nil).DeleteOne), ctx, filter)
}

// Find mocks base method.
func (m *MockCollectionInterface[R]) Find(arg0, arg1 interface{}, arg2 ...*options.FindOptions) ([]R, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].([]R)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCollectionInterfaceMockRecorder[R]) Find(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCollectionInterface[R])(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockCollectionInterface[R]) FindOne(arg0, arg1 interface{}) (R, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(R)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockCollectionInterfaceMockRecorder[R]) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockCollectionInterface[R])(nil).FindOne), arg0, arg1)
}

// InsertOne mocks base method.
func (m *MockCollectionInterface[R]) InsertOne(ctx, param interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, param)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockCollectionInterfaceMockRecorder[R]) InsertOne(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockCollectionInterface[R])(nil).InsertOne), ctx, param)
}

// UpdateMany mocks base method.
func (m *MockCollectionInterface[R]) UpdateMany(ctx, filter, update interface{}) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", ctx, filter, update)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockCollectionInterfaceMockRecorder[R]) UpdateMany(ctx, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockCollectionInterface[R])(nil).UpdateMany), ctx, filter, update)
}

// UpdateOne mocks base method.
func (m *MockCollectionInterface[R]) UpdateOne(ctx, param, update interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", ctx, param, update)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockCollectionInterfaceMockRecorder[R]) UpdateOne(ctx, param, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockCollectionInterface[R])(nil).UpdateOne), ctx, param, update)
}

// UpsertOne mocks base method.
func (m *MockCollectionInterface[R]) UpsertOne(ctx, filter, update interface{}) (string, int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOne", ctx, filter, update)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// UpsertOne indicates an expected call of UpsertOne.
func (mr *MockCollectionInterfaceMockRecorder[R]) UpsertOne(ctx, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOne", reflect.TypeOf((*MockCollectionInterface[R])(nil).UpsertOne), ctx, filter, update)
}

// MockSingleResultInterface is a mock of SingleResultInterface interface.
type MockSingleResultInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSingleResultInterfaceMockRecorder
}

// MockSingleResultInterfaceMockRecorder is the mock recorder for MockSingleResultInterface.
type MockSingleResultInterfaceMockRecorder struct {
	mock *MockSingleResultInterface
}

// NewMockSingleResultInterface creates a new mock instance.
func NewMockSingleResultInterface(ctrl *gomock.Controller) *MockSingleResultInterface {
	mock := &MockSingleResultInterface{ctrl: ctrl}
	mock.recorder = &MockSingleResultInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleResultInterface) EXPECT() *MockSingleResultInterfaceMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockSingleResultInterface) Decode(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockSingleResultInterfaceMockRecorder) Decode(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockSingleResultInterface)(nil).Decode), v)
}

// MockMongoClientInterface is a mock of MongoClientInterface interface.
type MockMongoClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMongoClientInterfaceMockRecorder
}

// MockMongoClientInterfaceMockRecorder is the mock recorder for MockMongoClientInterface.
type MockMongoClientInterfaceMockRecorder struct {
	mock *MockMongoClientInterface
}

// NewMockMongoClientInterface creates a new mock instance.
func NewMockMongoClientInterface(ctrl *gomock.Controller) *MockMongoClientInterface {
	mock := &MockMongoClientInterface{ctrl: ctrl}
	mock.recorder = &MockMongoClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoClientInterface) EXPECT() *MockMongoClientInterfaceMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockMongoClientInterface) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockMongoClientInterfaceMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMongoClientInterface)(nil).Connect))
}

// Disconnect mocks base method.
func (m *MockMongoClientInterface) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockMongoClientInterfaceMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMongoClientInterface)(nil).Disconnect))
}

// StartSession mocks base method.
func (m *MockMongoClientInterface) StartSession() (mongo.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession")
	ret0, _ := ret[0].(mongo.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSession indicates an expected call of StartSession.
func (mr *MockMongoClientInterfaceMockRecorder) StartSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockMongoClientInterface)(nil).StartSession))
}

// UseSession mocks base method.
func (m *MockMongoClientInterface) UseSession(ctx context.Context, fn func(mongo.SessionContext) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseSession", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseSession indicates an expected call of UseSession.
func (mr *MockMongoClientInterfaceMockRecorder) UseSession(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseSession", reflect.TypeOf((*MockMongoClientInterface)(nil).UseSession), ctx, fn)
}
