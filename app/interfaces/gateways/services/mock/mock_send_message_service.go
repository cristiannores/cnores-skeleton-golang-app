// Code generated by MockGen. DO NOT EDIT.
// Source: send_message_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSendServiceInterface is a mock of SendServiceInterface interface.
type MockSendServiceInterface[I any] struct {
	ctrl     *gomock.Controller
	recorder *MockSendServiceInterfaceMockRecorder[I]
}

// MockSendServiceInterfaceMockRecorder is the mock recorder for MockSendServiceInterface.
type MockSendServiceInterfaceMockRecorder[I any] struct {
	mock *MockSendServiceInterface[I]
}

// NewMockSendServiceInterface creates a new mock instance.
func NewMockSendServiceInterface[I any](ctrl *gomock.Controller) *MockSendServiceInterface[I] {
	mock := &MockSendServiceInterface[I]{ctrl: ctrl}
	mock.recorder = &MockSendServiceInterfaceMockRecorder[I]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendServiceInterface[I]) EXPECT() *MockSendServiceInterfaceMockRecorder[I] {
	return m.recorder
}

// Send mocks base method.
func (m *MockSendServiceInterface[I]) Send(ctx context.Context, key string, input I) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, key, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSendServiceInterfaceMockRecorder[I]) Send(ctx, key, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSendServiceInterface[I])(nil).Send), ctx, key, input)
}
